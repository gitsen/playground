// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protos/chat.proto

/*
Package Chat is a generated protocol buffer package.

It is generated from these files:
	protos/chat.proto

It has these top-level messages:
	RegisterRequest
	RegisterResponse
	ChatRequest
	ChatResponse
*/
package Chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisterRequest struct {
	ClientId string `protobuf:"bytes,1,opt,name=clientId" json:"clientId,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegisterRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type RegisterResponse struct {
}

func (m *RegisterResponse) Reset()                    { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()               {}
func (*RegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ChatRequest struct {
	Message  string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	ClientID string `protobuf:"bytes,2,opt,name=clientID" json:"clientID,omitempty"`
}

func (m *ChatRequest) Reset()                    { *m = ChatRequest{} }
func (m *ChatRequest) String() string            { return proto.CompactTextString(m) }
func (*ChatRequest) ProtoMessage()               {}
func (*ChatRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ChatRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ChatRequest) GetClientID() string {
	if m != nil {
		return m.ClientID
	}
	return ""
}

type ChatResponse struct {
	Message  string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	ClientId string `protobuf:"bytes,2,opt,name=clientId" json:"clientId,omitempty"`
}

func (m *ChatResponse) Reset()                    { *m = ChatResponse{} }
func (m *ChatResponse) String() string            { return proto.CompactTextString(m) }
func (*ChatResponse) ProtoMessage()               {}
func (*ChatResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ChatResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ChatResponse) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

func init() {
	proto.RegisterType((*RegisterRequest)(nil), "Chat.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "Chat.RegisterResponse")
	proto.RegisterType((*ChatRequest)(nil), "Chat.ChatRequest")
	proto.RegisterType((*ChatResponse)(nil), "Chat.ChatResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Chat service

type ChatClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Chat(ctx context.Context, opts ...grpc.CallOption) (Chat_ChatClient, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := grpc.Invoke(ctx, "/Chat.Chat/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Chat_ChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Chat_serviceDesc.Streams[0], c.cc, "/Chat.Chat/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatChatClient{stream}
	return x, nil
}

type Chat_ChatClient interface {
	Send(*ChatRequest) error
	Recv() (*ChatResponse, error)
	grpc.ClientStream
}

type chatChatClient struct {
	grpc.ClientStream
}

func (x *chatChatClient) Send(m *ChatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatChatClient) Recv() (*ChatResponse, error) {
	m := new(ChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Chat service

type ChatServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Chat(Chat_ChatServer) error
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chat.Chat/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).Chat(&chatChatServer{stream})
}

type Chat_ChatServer interface {
	Send(*ChatResponse) error
	Recv() (*ChatRequest, error)
	grpc.ServerStream
}

type chatChatServer struct {
	grpc.ServerStream
}

func (x *chatChatServer) Send(m *ChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatChatServer) Recv() (*ChatRequest, error) {
	m := new(ChatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Chat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Chat_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _Chat_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/chat.proto",
}

func init() { proto.RegisterFile("protos/chat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0x2f, 0xd6, 0x4f, 0xce, 0x48, 0x2c, 0xd1, 0x03, 0xb3, 0x85, 0x58, 0x9c, 0x33, 0x12, 0x4b,
	0x94, 0x74, 0xb9, 0xf8, 0x83, 0x52, 0xd3, 0x33, 0x8b, 0x4b, 0x52, 0x8b, 0x82, 0x52, 0x0b, 0x4b,
	0x53, 0x8b, 0x4b, 0x84, 0xa4, 0xb8, 0x38, 0x92, 0x73, 0x32, 0x53, 0xf3, 0x4a, 0x3c, 0x53, 0x24,
	0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xe0, 0x7c, 0x25, 0x21, 0x2e, 0x01, 0x84, 0xf2, 0xe2, 0x82,
	0xfc, 0xbc, 0xe2, 0x54, 0x25, 0x67, 0x2e, 0x6e, 0x90, 0x51, 0x30, 0xed, 0x12, 0x5c, 0xec, 0xb9,
	0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x50, 0xdd, 0x30, 0x2e, 0x92, 0xc1, 0x2e, 0x12, 0x4c, 0x28,
	0x06, 0xbb, 0x28, 0xb9, 0x70, 0xf1, 0x40, 0x0c, 0x81, 0x18, 0x4a, 0x94, 0x29, 0x29, 0x68, 0xa6,
	0xa4, 0x18, 0x55, 0x70, 0x81, 0x7d, 0x25, 0x64, 0xcd, 0xc5, 0x01, 0x73, 0xa6, 0x90, 0xa8, 0x1e,
	0x48, 0x48, 0x0f, 0xcd, 0x97, 0x52, 0x62, 0xe8, 0xc2, 0x50, 0xdf, 0x30, 0x08, 0x19, 0x43, 0x0d,
	0x11, 0x84, 0xa8, 0x40, 0xf2, 0x9b, 0x94, 0x10, 0xb2, 0x10, 0x4c, 0x83, 0x06, 0xa3, 0x01, 0x63,
	0x12, 0x1b, 0x38, 0x50, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x86, 0x06, 0x83, 0x13, 0x69,
	0x01, 0x00, 0x00,
}
